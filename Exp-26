#include <stdio.h>
#include <stdlib.h>
#include <math.h>

unsigned long long gcd(unsigned long long a, unsigned long long b) {
    while (b != 0) {
        unsigned long long temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

unsigned long long modExp(unsigned long long base, unsigned long long exp, unsigned long long mod) {
    unsigned long long result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

unsigned long long modInverse(unsigned long long e, unsigned long long phi) {
    unsigned long long t = 0, newT = 1, r = phi, newR = e;
    while (newR != 0) {
        unsigned long long quotient = r / newR;
        unsigned long long temp = newT;
        newT = t - quotient * newT;
        t = temp;
        temp = newR;
        newR = r - quotient * newR;
        r = temp;
    }
    if (t < 0) t += phi;
    return t;
}

int isPrime(unsigned long long num) {
    if (num <= 1) return 0;
    for (unsigned long long i = 2; i <= sqrt(num); i++)
        if (num % i == 0) return 0;
    return 1;
}

unsigned long long generatePrime() {
    unsigned long long prime;
    do {
        prime = rand() % 100 + 100;
    } while (!isPrime(prime));
    return prime;
}

int main() {
    unsigned long long p = generatePrime();
    unsigned long long q = generatePrime();
    unsigned long long n = p * q;
    unsigned long long phi = (p - 1) * (q - 1);

    unsigned long long e = 3;
    while (gcd(e, phi) != 1) e++;

    unsigned long long d = modInverse(e, phi);

    printf("Public Key: (%llu, %llu)\n", e, n);
    printf("Private Key: (%llu, %llu)\n", d, n);

    unsigned long long message, cipher, decrypted;
    printf("Enter message: ");
    scanf("%llu", &message);

    cipher = modExp(message, e, n);
    printf("Encrypted: %llu\n", cipher);

    decrypted = modExp(cipher, d, n);
    printf("Decrypted: %llu\n", decrypted);

    return 0;
}
