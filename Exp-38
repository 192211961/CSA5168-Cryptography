#include <stdio.h>
#include <string.h>

#define N 3

void matrixMultiply(int a[N][N], int b[N], int result[N]) {
    for (int i = 0; i < N; i++) {
        result[i] = 0;
        for (int j = 0; j < N; j++) {
            result[i] += a[i][j] * b[j];
        }
        result[i] %= 26;
    }
}

int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) return x;
    }
    return -1;
}

void getCofactor(int mat[N][N], int temp[N][N], int p, int q, int n) {
    int i = 0, j = 0;
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            if (row != p && col != q) {
                temp[i][j++] = mat[row][col];
                if (j == n - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

int determinant(int mat[N][N], int n) {
    int D = 0;
    if (n == 1) return mat[0][0];
    int temp[N][N];
    int sign = 1;
    for (int f = 0; f < n; f++) {
        getCofactor(mat, temp, 0, f, n);
        D += sign * mat[0][f] * determinant(temp, n - 1);
        sign = -sign;
    }
    return D;
}

void adjoint(int A[N][N], int adj[N][N]) {
    if (N == 1) {
        adj[0][0] = 1;
        return;
    }
    int sign = 1, temp[N][N];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            getCofactor(A, temp, i, j, N);
            sign = ((i + j) % 2 == 0) ? 1 : -1;
            adj[j][i] = (sign * determinant(temp, N - 1)) % 26;
            if (adj[j][i] < 0) adj[j][i] += 26;
        }
    }
}

int inverseMatrix(int A[N][N], int inverse[N][N]) {
    int det = determinant(A, N);
    det = det % 26;
    if (det < 0) det += 26;
    int invDet = modInverse(det, 26);
    if (invDet == -1) return 0;
    int adj[N][N];
    adjoint(A, adj);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            inverse[i][j] = (adj[i][j] * invDet) % 26;
            if (inverse[i][j] < 0) inverse[i][j] += 26;
        }
    }
    return 1;
}

void knownPlaintextAttack(int plaintext[N], int ciphertext[N], int key[N][N]) {
    int inverseKey[N][N];
    if (!inverseMatrix(key, inverseKey)) {
        printf("Inverse doesn't exist.\n");
        return;
    }
    int decrypted[N];
    matrixMultiply(inverseKey, ciphertext, decrypted);
    printf("Decrypted text: ");
    for (int i = 0; i < N; i++) printf("%c", decrypted[i] + 'A');
    printf("\n");
}

int main() {
    int key[N][N] = {{6, 24, 1}, {13, 16, 10}, {20, 17, 15}};
    int plaintext[N] = {7, 4, 11};
    int ciphertext[N] = {15, 17, 18};
    knownPlaintextAttack(plaintext, ciphertext, key);
    return 0;
}
