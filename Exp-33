#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
void generateKeys(uint64_t key, uint64_t* subKeys);
uint64_t initialPermutation(uint64_t block);
uint64_t finalPermutation(uint64_t block);
uint64_t feistelFunction(uint32_t right, uint64_t subKey);
uint64_t desEncrypt(uint64_t plaintext, uint64_t* subKeys);
uint64_t desDecrypt(uint64_t ciphertext, uint64_t* subKeys);
static const uint8_t IP[] = { 
    58, 50, 42, 34, 26, 18, 10, 2, 
    60, 52, 44, 36, 28, 20, 12, 4, 
    62, 54, 46, 38, 30, 22, 14, 6, 
    64, 56, 48, 40, 32, 24, 16, 8, 
    57, 49, 41, 33, 25, 17, 9, 1, 
    59, 51, 43, 35, 27, 19, 11, 3, 
    61, 53, 45, 37, 29, 21, 13, 5, 
    63, 55, 47, 39, 31, 23, 15, 7 
};
static const uint8_t FP[] = { 
    40, 8, 48, 16, 56, 24, 64, 32, 
    39, 7, 47, 15, 55, 23, 63, 31, 
    38, 6, 46, 14, 54, 22, 62, 30, 
    37, 5, 45, 13, 53, 21, 61, 29, 
    36, 4, 44, 12, 52, 20, 60, 28, 
    35, 3, 43, 11, 51, 19, 59, 27, 
    34, 2, 42, 10, 50, 18, 58, 26, 
    33, 1, 41, 9, 49, 17, 57, 25 
};

int main() {
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t subKeys[16];
    generateKeys(key, subKeys);
    uint64_t ciphertext = desEncrypt(plaintext, subKeys);
    printf("Ciphertext: %016llx\n", ciphertext);
    uint64_t decryptedText = desDecrypt(ciphertext, subKeys);
    printf("Decrypted text: %016llx\n", decryptedText);

    return 0;
}
void generateKeys(uint64_t key, uint64_t* subKeys) 
{
    for (int i = 0; i < 16; i++) {
        subKeys[i] = key ^ (0xF0F0F0F0F0F0F0F0 >> i);
    }
}
uint64_t initialPermutation(uint64_t block) {
    uint64_t permuted = 0;
    for (int i = 0; i < 64; i++) {
        permuted |= ((block >> (64 - IP[i])) & 1) << (63 - i);
    }
    return permuted;
}
uint64_t finalPermutation(uint64_t block) {
    uint64_t permuted = 0;
    for (int i = 0; i < 64; i++) {
        permuted |= ((block >> (64 - FP[i])) & 1) << (63 - i);
    }
    return permuted;
}
uint64_t feistelFunction(uint32_t right, uint64_t subKey) 
{
    return right ^ (subKey & 0xFFFFFFFF);
}
uint64_t desEncrypt(uint64_t plaintext, uint64_t* subKeys) {
    uint64_t permutedBlock = initialPermutation(plaintext);
    uint32_t left = permutedBlock >> 32;
    uint32_t right = permutedBlock & 0xFFFFFFFF;
    for (int i = 0; i < 16; i++) {
        uint32_t newRight = left ^ feistelFunction(right, subKeys[i]);
        left = right;
        right = newRight;
    }

    uint64_t combined = ((uint64_t)right << 32) | left;
    return finalPermutation(combined);
}
uint64_t desDecrypt(uint64_t ciphertext, uint64_t* subKeys) {
    uint64_t permutedBlock = initialPermutation(ciphertext);
    uint32_t left = permutedBlock >> 32;
    uint32_t right = permutedBlock & 0xFFFFFFFF;
    for (int i = 15; i >= 0; i--) {
        uint32_t newRight = left ^ feistelFunction(right, subKeys[i]);
        left = right;
        right = newRight;
    }

    uint64_t combined = ((uint64_t)right << 32) | left;
    return finalPermutation(combined);
}
